Linear part:
exp(exp(g,x_16),y_17) = exp(exp(g,y_17),x_16)
Completing equations...
Completed equations:
exp(exp(g,x_16),y_17) = exp(exp(g,y_17),x_16)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}new U: host;
{2}new V: host;
{3}new PSKs: bitstring;
(
    {4}!
    {5}new x_49: exponent;
    {6}let E_U: G = exp(g,x_49) in
    {7}new S_U: bitstring;
    {8}new N_U: nonce;
    {9}new KID: bitstring;
    {10}new APP_50: bitstring;
    {11}let PSK: preSharedkey = identifyPreSharedKey(KID,PSKs) in
    {12}let message_1_51: bitstring = (MSG_TYPE_1,S_U,N_U,E_U,KID,APP_50) in
    {13}out(c, message_1_51);
    {14}in(c, message_2_52: bitstring);
    {15}let (data_2_53: bitstring,COSE_ENC_2_54: bitstring) = message_2_52 in
    {16}let (=MSG_TYPE_2,=S_U,xS_V: bitstring,xN_V: nonce,xE_V: G,xAPP_2_55: bitstring) = data_2_53 in
    {17}let aad_2_56: bitstring = hash((message_1_51,data_2_53)) in
    {18}let K: G = exp(xE_V,x_49) in
    {19}let K_2_57: derivedKey = HKDF(K,aad_2_56,PSK) in
    {20}let () = sharedDecrypt(COSE_ENC_2_54,K_2_57,aad_2_56) in
    {21}let data_3_58: bitstring = (MSG_TYPE_3,xS_V) in
    {22}let aad_3_59: bitstring = hash((hash((message_1_51,message_2_52)),data_3_58)) in
    {23}let K_3_60: derivedKey = HKDF(K,aad_3_59,PSK) in
    {24}new APP_61: bitstring;
    {25}let message_3_62: bitstring = (data_3_58,sharedEncrypt(APP_61,K_3_60,aad_3_59)) in
    {26}out(c, message_3_62)
) | (
    {27}!
    {28}new y_63: exponent;
    {29}let E_V: G = exp(g,y_63) in
    {30}new S_V: bitstring;
    {31}in(c, message_1_64: bitstring);
    {32}let (=MSG_TYPE_1,xS_U: bitstring,N_U_65: nonce,xE_U: G,xKID: bitstring,APP_1_66: bitstring) = message_1_64 in
    {33}new N_V: nonce;
    {34}new APP_67: bitstring;
    {35}let PSK_68: preSharedkey = identifyPreSharedKey(xKID,PSKs) in
    {36}let data_2_69: bitstring = (MSG_TYPE_2,xS_U,S_V,N_V,E_V,APP_67) in
    {37}let aad_2_70: bitstring = hash((message_1_64,data_2_69)) in
    {38}let K_71: G = exp(xE_U,y_63) in
    {39}let K_2_72: derivedKey = HKDF(K_71,aad_2_70,PSK_68) in
    {40}let message_2_73: bitstring = (data_2_69,sharedEncrypt((),K_2_72,aad_2_70)) in
    {41}out(c, message_2_73);
    {42}in(c, message_3_74: bitstring);
    {43}let (data_3_75: bitstring,COSE_ENC_3_76: bitstring) = message_3_74 in
    {44}let (=MSG_TYPE_3,=S_V) = data_3_75 in
    {45}let aad_3_77: bitstring = hash((hash((message_1_64,message_2_73)),data_3_75)) in
    {46}let K_3_78: derivedKey = HKDF(K_71,aad_3_77,PSK_68) in
    {47}let APP_3_79: bitstring = sharedDecrypt(COSE_ENC_3_76,K_3_78,aad_3_77) in
    0
)

-- Query not attacker(APP_61[message_2_52 = v_1083,!1 = v_1084])
Completing...
Starting query not attacker(APP_61[message_2_52 = v_1083,!1 = v_1084])
RESULT not attacker(APP_61[message_2_52 = v_1083,!1 = v_1084]) is true.
