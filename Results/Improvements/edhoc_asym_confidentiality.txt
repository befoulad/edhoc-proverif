Linear part:
exp(exp(g,x_24),y_25) = exp(exp(g,y_25),x_24)
Completing equations...
Completed equations:
exp(exp(g,x_24),y_25) = exp(exp(g,y_25),x_24)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}new U: host;
{2}new V: host;
{3}new skU: skey;
{4}new skV: skey;
{5}let pkU: pkey = pk(skU) in
{6}let pkV: pkey = pk(skV) in
{7}let pkIdU: pkID = identifyPK(skU,pk(skU)) in
{8}let pkIdV: pkID = identifyPK(skV,pk(skV)) in
{9}out(c, pkU);
{10}out(c, pkV);
(
    {11}!
    {12}new x_63: exponent;
    {13}let E_U: G = exp(g,x_63) in
    {14}new S_U: bitstring;
    {15}new N_U: nonce;
    {16}new APP_64: bitstring;
    {17}let message_1_65: bitstring = (MSG_TYPE_1,S_U,N_U,E_U,APP_64) in
    {18}out(c, message_1_65);
    {19}in(c, message_2_66: bitstring);
    {20}let (data_2_67: bitstring,COSE_ENC_2_68: bitstring) = message_2_66 in
    {21}let (=MSG_TYPE_2,=S_U,xS_V: bitstring,N_V: nonce,xE_V: G,xAPP_2_69: bitstring) = data_2_67 in
    {22}let aad_2_70: bitstring = hash((message_1_65,data_2_67)) in
    {23}let K: G = exp(xE_V,x_63) in
    {24}let K_2_71: derivedKey = HKDF(K,aad_2_70) in
    {25}let signature_2_72: bitstring = decrypt(COSE_ENC_2_68,K_2_71,aad_2_70) in
    {26}let (=pkIdV,=aad_2_70) = verify(signature_2_72,pkV) in
    {27}new APP_73: bitstring;
    {28}let data_3_74: bitstring = (MSG_TYPE_3,xS_V) in
    {29}let aad_3_75: bitstring = hash((hash((message_1_65,message_2_66)),data_3_74)) in
    {30}let signature_3_76: bitstring = sign((identifyPK(skU,pkU),aad_3_75,APP_73),skU) in
    {31}let K_3_77: derivedKey = HKDF(K,aad_3_75) in
    {32}let COSE_ENC_3_78: bitstring = encrypt(signature_3_76,K_3_77,aad_3_75) in
    {33}let message_3_79: bitstring = (data_3_74,COSE_ENC_3_78) in
    {34}out(c, message_3_79)
) | (
    {35}!
    {36}new y_80: exponent;
    {37}let E_V: G = exp(g,y_80) in
    {38}new S_V: bitstring;
    {39}in(c, message_1_81: bitstring);
    {40}let (xMSG_TYPE_1_82: bitstring,xS_U: bitstring,xN_U: nonce,xE_U: G,APP_1_83: bitstring) = message_1_81 in
    {41}new N_V_84: nonce;
    {42}new APP_85: bitstring;
    {43}let data_2_86: bitstring = (MSG_TYPE_2,xS_U,S_V,N_V_84,E_V,APP_85) in
    {44}let aad_2_87: bitstring = hash((message_1_81,data_2_86)) in
    {45}let signature_2_88: bitstring = sign((identifyPK(skV,pkV),aad_2_87),skV) in
    {46}let K_89: G = exp(xE_U,y_80) in
    {47}let K_2_90: derivedKey = HKDF(K_89,aad_2_87) in
    {48}let COSE_ENC_2_91: bitstring = encrypt(signature_2_88,K_2_90,aad_2_87) in
    {49}let message_2_92: bitstring = (data_2_86,COSE_ENC_2_91) in
    {50}out(c, message_2_92);
    {51}in(c, message_3_93: bitstring);
    {52}let (data_3_94: bitstring,COSE_ENC_3_95: bitstring) = message_3_93 in
    {53}let (=MSG_TYPE_3,=S_V) = data_3_94 in
    {54}let aad_3_96: bitstring = hash((hash((message_1_81,message_2_92)),data_3_94)) in
    {55}let K_3_97: derivedKey = HKDF(K_89,aad_3_96) in
    {56}let signature_3_98: bitstring = decrypt(COSE_ENC_3_95,K_3_97,aad_3_96) in
    {57}let (=pkIdU,=aad_3_96,APP_3_99: bitstring) = verify(signature_3_98,pkU) in
    0
)

-- Query not attacker(APP_73[message_2_66 = v_1314,!1 = v_1315])
Completing...
Starting query not attacker(APP_73[message_2_66 = v_1314,!1 = v_1315])
RESULT not attacker(APP_73[message_2_66 = v_1314,!1 = v_1315]) is true.
