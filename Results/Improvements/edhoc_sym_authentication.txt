Linear part:
exp(exp(g,x_16),y_17) = exp(exp(g,y_17),x_16)
Completing equations...
Completed equations:
exp(exp(g,x_16),y_17) = exp(exp(g,y_17),x_16)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}new U: host;
{2}new V: host;
{3}new W: host;
{4}new PSKs_UV: bitstring;
{5}new PSKs_UW: bitstring;
(
    {6}!
    {7}new x_49: exponent;
    {8}let E_U: G = exp(g,x_49) in
    {9}new S_U: bitstring;
    {10}event startInitiator(U,V,S_U);
    {11}new N_U: nonce;
    {12}new KID: bitstring;
    {13}new APP_50: bitstring;
    {14}let PSK: preSharedkey = identifyPreSharedKey(KID,PSKs_UV) in
    {15}let message_1_51: bitstring = (MSG_TYPE_1,S_U,N_U,E_U,KID,APP_50) in
    {16}out(c, message_1_51);
    {17}in(c, message_2_52: bitstring);
    {18}let (data_2_53: bitstring,COSE_ENC_2_54: bitstring) = message_2_52 in
    {19}let (=MSG_TYPE_2,=S_U,xS_V: bitstring,xN_V: nonce,xE_V: G,xAPP_2_55: bitstring) = data_2_53 in
    {20}let aad_2_56: bitstring = hash((message_1_51,data_2_53)) in
    {21}let K: G = exp(xE_V,x_49) in
    {22}let K_2_57: derivedKey = HKDF(K,aad_2_56,PSK) in
    {23}let () = sharedDecrypt(COSE_ENC_2_54,K_2_57,aad_2_56) in
    {24}let data_3_58: bitstring = (MSG_TYPE_3,xS_V) in
    {25}let aad_3_59: bitstring = hash((hash((message_1_51,message_2_52)),data_3_58)) in
    {26}let K_3_60: derivedKey = HKDF(K,aad_3_59,PSK) in
    {27}new APP_61: bitstring;
    {28}let message_3_62: bitstring = (data_3_58,sharedEncrypt(APP_61,K_3_60,aad_3_59)) in
    {29}out(c, message_3_62);
    {30}event endInitiator(U,V,S_U,xS_V)
) | (
    {31}!
    {32}new y_63: exponent;
    {33}let E_V: G = exp(g,y_63) in
    {34}new S_V: bitstring;
    {35}event startResponder(U,V,S_V);
    {36}in(c, message_1_64: bitstring);
    {37}let (=MSG_TYPE_1,xS_U: bitstring,N_U_65: nonce,xE_U: G,xKID: bitstring,APP_1_66: bitstring) = message_1_64 in
    {38}new N_V: nonce;
    {39}new APP_67: bitstring;
    {40}let PSK_68: preSharedkey = identifyPreSharedKey(xKID,PSKs_UV) in
    {41}let data_2_69: bitstring = (MSG_TYPE_2,xS_U,S_V,N_V,E_V,APP_67) in
    {42}let aad_2_70: bitstring = hash((message_1_64,data_2_69)) in
    {43}let K_71: G = exp(xE_U,y_63) in
    {44}let K_2_72: derivedKey = HKDF(K_71,aad_2_70,PSK_68) in
    {45}let message_2_73: bitstring = (data_2_69,sharedEncrypt((),K_2_72,aad_2_70)) in
    {46}out(c, message_2_73);
    {47}in(c, message_3_74: bitstring);
    {48}let (data_3_75: bitstring,COSE_ENC_3_76: bitstring) = message_3_74 in
    {49}let (=MSG_TYPE_3,=S_V) = data_3_75 in
    {50}let aad_3_77: bitstring = hash((hash((message_1_64,message_2_73)),data_3_75)) in
    {51}let K_3_78: derivedKey = HKDF(K_71,aad_3_77,PSK_68) in
    {52}let APP_3_79: bitstring = sharedDecrypt(COSE_ENC_3_76,K_3_78,aad_3_77) in
    {53}event endResponder(U,V,S_V,xS_U)
) | (
    {54}!
    {55}new x_80: exponent;
    {56}let E_U_81: G = exp(g,x_80) in
    {57}new S_U_82: bitstring;
    {58}event startInitiator(U,W,S_U_82);
    {59}new N_U_83: nonce;
    {60}new KID_84: bitstring;
    {61}new APP_85: bitstring;
    {62}let PSK_86: preSharedkey = identifyPreSharedKey(KID_84,PSKs_UW) in
    {63}let message_1_87: bitstring = (MSG_TYPE_1,S_U_82,N_U_83,E_U_81,KID_84,APP_85) in
    {64}out(c, message_1_87);
    {65}in(c, message_2_88: bitstring);
    {66}let (data_2_89: bitstring,COSE_ENC_2_90: bitstring) = message_2_88 in
    {67}let (=MSG_TYPE_2,=S_U_82,xS_V_91: bitstring,xN_V_92: nonce,xE_V_93: G,xAPP_2_94: bitstring) = data_2_89 in
    {68}let aad_2_95: bitstring = hash((message_1_87,data_2_89)) in
    {69}let K_96: G = exp(xE_V_93,x_80) in
    {70}let K_2_97: derivedKey = HKDF(K_96,aad_2_95,PSK_86) in
    {71}let () = sharedDecrypt(COSE_ENC_2_90,K_2_97,aad_2_95) in
    {72}let data_3_98: bitstring = (MSG_TYPE_3,xS_V_91) in
    {73}let aad_3_99: bitstring = hash((hash((message_1_87,message_2_88)),data_3_98)) in
    {74}let K_3_100: derivedKey = HKDF(K_96,aad_3_99,PSK_86) in
    {75}new APP_101: bitstring;
    {76}let message_3_102: bitstring = (data_3_98,sharedEncrypt(APP_101,K_3_100,aad_3_99)) in
    {77}out(c, message_3_102);
    {78}event endInitiator(U,W,S_U_82,xS_V_91)
) | (
    {79}!
    {80}new y_103: exponent;
    {81}let E_V_104: G = exp(g,y_103) in
    {82}new S_V_105: bitstring;
    {83}event startResponder(U,W,S_V_105);
    {84}in(c, message_1_106: bitstring);
    {85}let (=MSG_TYPE_1,xS_U_107: bitstring,N_U_108: nonce,xE_U_109: G,xKID_110: bitstring,APP_1_111: bitstring) = message_1_106 in
    {86}new N_V_112: nonce;
    {87}new APP_113: bitstring;
    {88}let PSK_114: preSharedkey = identifyPreSharedKey(xKID_110,PSKs_UW) in
    {89}let data_2_115: bitstring = (MSG_TYPE_2,xS_U_107,S_V_105,N_V_112,E_V_104,APP_113) in
    {90}let aad_2_116: bitstring = hash((message_1_106,data_2_115)) in
    {91}let K_117: G = exp(xE_U_109,y_103) in
    {92}let K_2_118: derivedKey = HKDF(K_117,aad_2_116,PSK_114) in
    {93}let message_2_119: bitstring = (data_2_115,sharedEncrypt((),K_2_118,aad_2_116)) in
    {94}out(c, message_2_119);
    {95}in(c, message_3_120: bitstring);
    {96}let (data_3_121: bitstring,COSE_ENC_3_122: bitstring) = message_3_120 in
    {97}let (=MSG_TYPE_3,=S_V_105) = data_3_121 in
    {98}let aad_3_123: bitstring = hash((hash((message_1_106,message_2_119)),data_3_121)) in
    {99}let K_3_124: derivedKey = HKDF(K_117,aad_3_123,PSK_114) in
    {100}let APP_3_125: bitstring = sharedDecrypt(COSE_ENC_3_122,K_3_124,aad_3_123) in
    {101}event endResponder(U,W,S_V_105,xS_U_107)
)

-- Query event(endResponder(U_126,V_127,S_V_129,S_U_128)) ==> event(startInitiator(U_126,V_127,S_U_128))
Completing...
200 rules inserted. The rule base contains 121 rules. 42 rules in the queue.
Starting query event(endResponder(U_126,V_127,S_V_129,S_U_128)) ==> event(startInitiator(U_126,V_127,S_U_128))
goal reachable: begin(startInitiator(U[],W[],S_U_82[!1 = @sid_7241])) -> end(endResponder(U[],W[],S_V_105[!1 = @sid_7242],S_U_82[!1 = @sid_7241]))
goal reachable: begin(startInitiator(U[],V[],S_U[!1 = @sid_7245])) -> end(endResponder(U[],V[],S_V[!1 = @sid_7246],S_U[!1 = @sid_7245]))
RESULT event(endResponder(U_126,V_127,S_V_129,S_U_128)) ==> event(startInitiator(U_126,V_127,S_U_128)) is true.
-- Query event(endInitiator(U_7253,V_7254,S_U_7255,S_V_7256)) ==> event(startResponder(U_7253,V_7254,S_V_7256))
Completing...
200 rules inserted. The rule base contains 134 rules. 35 rules in the queue.
Starting query event(endInitiator(U_7253,V_7254,S_U_7255,S_V_7256)) ==> event(startResponder(U_7253,V_7254,S_V_7256))
goal reachable: begin(startResponder(U[],W[],S_V_105[!1 = @sid_13501])) -> end(endInitiator(U[],W[],S_U_82[!1 = @sid_13502],S_V_105[!1 = @sid_13501]))
goal reachable: begin(startResponder(U[],V[],S_V[!1 = @sid_13505])) -> end(endInitiator(U[],V[],S_U[!1 = @sid_13506],S_V[!1 = @sid_13505]))
RESULT event(endInitiator(U_7253,V_7254,S_U_7255,S_V_7256)) ==> event(startResponder(U_7253,V_7254,S_V_7256)) is true.
