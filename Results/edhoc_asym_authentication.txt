Linear part:
exp(exp(g,x_24),y_25) = exp(exp(g,y_25),x_24)
Completing equations...
Completed equations:
exp(exp(g,x_24),y_25) = exp(exp(g,y_25),x_24)
Convergent part:
Completing equations...
Completed equations:
Process:
{1}new U: host;
{2}new V: host;
{3}new W: host;
{4}new skU: skey;
{5}new skV: skey;
{6}new skW: skey;
{7}let pkU: pkey = pk(skU) in
{8}let pkV: pkey = pk(skV) in
{9}let pkW: pkey = pk(skW) in
{10}let pkIdU: pkID = identifyPK(skU,pk(skU)) in
{11}let pkIdV: pkID = identifyPK(skV,pk(skV)) in
{12}let pkIdW: pkID = identifyPK(skW,pk(skW)) in
{13}out(c, pkU);
{14}out(c, pkV);
{15}out(c, pkW);
(
    {16}!
    {17}new x_63: exponent;
    {18}let E_U: G = exp(g,x_63) in
    {19}new S_U: bitstring;
    {20}event startInitiator(U,V,S_U);
    {21}new N_U: nonce;
    {22}new APP_64: bitstring;
    {23}let message_1_65: bitstring = (MSG_TYPE_1,S_U,N_U,E_U,APP_64) in
    {24}out(c, message_1_65);
    {25}in(c, message_2_66: bitstring);
    {26}let (data_2_67: bitstring,COSE_ENC_2_68: bitstring) = message_2_66 in
    {27}let (=MSG_TYPE_2,=S_U,xS_V: bitstring,N_V: nonce,xE_V: G) = data_2_67 in
    {28}let aad_2_69: bitstring = hash((message_1_65,data_2_67)) in
    {29}let K: G = exp(xE_V,x_63) in
    {30}let K_2_70: derivedKey = HKDF(K,aad_2_69) in
    {31}let signature_2_71: bitstring = decrypt(COSE_ENC_2_68,K_2_70,aad_2_69) in
    {32}let (=pkIdV,=aad_2_69,APP_2_72: bitstring) = verify(signature_2_71,pkV) in
    {33}new APP_73: bitstring;
    {34}let data_3_74: bitstring = (MSG_TYPE_3,xS_V) in
    {35}let aad_3_75: bitstring = hash((hash((message_1_65,message_2_66)),data_3_74)) in
    {36}let signature_3_76: bitstring = sign((identifyPK(skU,pkU),aad_3_75,APP_73),skU) in
    {37}let K_3_77: derivedKey = HKDF(K,aad_3_75) in
    {38}let COSE_ENC_3_78: bitstring = encrypt(signature_3_76,K_3_77,aad_3_75) in
    {39}let message_3_79: bitstring = (data_3_74,COSE_ENC_3_78) in
    {40}out(c, message_3_79);
    {41}event endInitiator(U,V,S_U,xS_V)
) | (
    {42}!
    {43}new y_80: exponent;
    {44}let E_V: G = exp(g,y_80) in
    {45}new S_V: bitstring;
    {46}event startResponder(U,V,S_V);
    {47}in(c, message_1_81: bitstring);
    {48}let (xMSG_TYPE_1_82: bitstring,xS_U: bitstring,xN_U: nonce,xE_U: G,APP_1_83: bitstring) = message_1_81 in
    {49}new N_V_84: nonce;
    {50}new APP_85: bitstring;
    {51}let data_2_86: bitstring = (MSG_TYPE_2,xS_U,S_V,N_V_84,E_V) in
    {52}let aad_2_87: bitstring = hash((message_1_81,data_2_86)) in
    {53}let signature_2_88: bitstring = sign((identifyPK(skV,pkV),aad_2_87,APP_85),skV) in
    {54}let K_89: G = exp(xE_U,y_80) in
    {55}let K_2_90: derivedKey = HKDF(K_89,aad_2_87) in
    {56}let COSE_ENC_2_91: bitstring = encrypt(signature_2_88,K_2_90,aad_2_87) in
    {57}let message_2_92: bitstring = (data_2_86,COSE_ENC_2_91) in
    {58}out(c, message_2_92);
    {59}in(c, message_3_93: bitstring);
    {60}let (data_3_94: bitstring,COSE_ENC_3_95: bitstring) = message_3_93 in
    {61}let (=MSG_TYPE_3,=S_V) = data_3_94 in
    {62}let aad_3_96: bitstring = hash((hash((message_1_81,message_2_92)),data_3_94)) in
    {63}let K_3_97: derivedKey = HKDF(K_89,aad_3_96) in
    {64}let signature_3_98: bitstring = decrypt(COSE_ENC_3_95,K_3_97,aad_3_96) in
    {65}let (=pkIdU,=aad_3_96,APP_3_99: bitstring) = verify(signature_3_98,pkU) in
    {66}event endResponder(U,V,xS_U,S_V)
) | (
    {67}!
    {68}new x_100: exponent;
    {69}let E_U_101: G = exp(g,x_100) in
    {70}new S_U_102: bitstring;
    {71}event startInitiator(U,W,S_U_102);
    {72}new N_U_103: nonce;
    {73}new APP_104: bitstring;
    {74}let message_1_105: bitstring = (MSG_TYPE_1,S_U_102,N_U_103,E_U_101,APP_104) in
    {75}out(c, message_1_105);
    {76}in(c, message_2_106: bitstring);
    {77}let (data_2_107: bitstring,COSE_ENC_2_108: bitstring) = message_2_106 in
    {78}let (=MSG_TYPE_2,=S_U_102,xS_V_109: bitstring,N_V_110: nonce,xE_V_111: G) = data_2_107 in
    {79}let aad_2_112: bitstring = hash((message_1_105,data_2_107)) in
    {80}let K_113: G = exp(xE_V_111,x_100) in
    {81}let K_2_114: derivedKey = HKDF(K_113,aad_2_112) in
    {82}let signature_2_115: bitstring = decrypt(COSE_ENC_2_108,K_2_114,aad_2_112) in
    {83}let (=pkIdW,=aad_2_112,APP_2_116: bitstring) = verify(signature_2_115,pkW) in
    {84}new APP_117: bitstring;
    {85}let data_3_118: bitstring = (MSG_TYPE_3,xS_V_109) in
    {86}let aad_3_119: bitstring = hash((hash((message_1_105,message_2_106)),data_3_118)) in
    {87}let signature_3_120: bitstring = sign((identifyPK(skU,pkU),aad_3_119,APP_117),skU) in
    {88}let K_3_121: derivedKey = HKDF(K_113,aad_3_119) in
    {89}let COSE_ENC_3_122: bitstring = encrypt(signature_3_120,K_3_121,aad_3_119) in
    {90}let message_3_123: bitstring = (data_3_118,COSE_ENC_3_122) in
    {91}out(c, message_3_123);
    {92}event endInitiator(U,W,S_U_102,xS_V_109)
) | (
    {93}!
    {94}new y_124: exponent;
    {95}let E_V_125: G = exp(g,y_124) in
    {96}new S_V_126: bitstring;
    {97}event startResponder(U,W,S_V_126);
    {98}in(c, message_1_127: bitstring);
    {99}let (xMSG_TYPE_1_128: bitstring,xS_U_129: bitstring,xN_U_130: nonce,xE_U_131: G,APP_1_132: bitstring) = message_1_127 in
    {100}new N_V_133: nonce;
    {101}new APP_134: bitstring;
    {102}let data_2_135: bitstring = (MSG_TYPE_2,xS_U_129,S_V_126,N_V_133,E_V_125) in
    {103}let aad_2_136: bitstring = hash((message_1_127,data_2_135)) in
    {104}let signature_2_137: bitstring = sign((identifyPK(skW,pkW),aad_2_136,APP_134),skW) in
    {105}let K_138: G = exp(xE_U_131,y_124) in
    {106}let K_2_139: derivedKey = HKDF(K_138,aad_2_136) in
    {107}let COSE_ENC_2_140: bitstring = encrypt(signature_2_137,K_2_139,aad_2_136) in
    {108}let message_2_141: bitstring = (data_2_135,COSE_ENC_2_140) in
    {109}out(c, message_2_141);
    {110}in(c, message_3_142: bitstring);
    {111}let (data_3_143: bitstring,COSE_ENC_3_144: bitstring) = message_3_142 in
    {112}let (=MSG_TYPE_3,=S_V_126) = data_3_143 in
    {113}let aad_3_145: bitstring = hash((hash((message_1_127,message_2_141)),data_3_143)) in
    {114}let K_3_146: derivedKey = HKDF(K_138,aad_3_145) in
    {115}let signature_3_147: bitstring = decrypt(COSE_ENC_3_144,K_3_146,aad_3_145) in
    {116}let (=pkIdU,=aad_3_145,APP_3_148: bitstring) = verify(signature_3_147,pkU) in
    {117}event endResponder(U,W,xS_U_129,S_V_126)
)

-- Query event(endResponder(U_149,V_150,S_U_151,S_V_152)) ==> event(startInitiator(U_149,V_150,S_U_151))
Completing...
200 rules inserted. The rule base contains 156 rules. 45 rules in the queue.
400 rules inserted. The rule base contains 218 rules. 14 rules in the queue.
Starting query event(endResponder(U_149,V_150,S_U_151,S_V_152)) ==> event(startInitiator(U_149,V_150,S_U_151))
goal reachable: begin(startInitiator(U[],W[],S_U_102[!1 = @sid_7500])) -> end(endResponder(U[],W[],S_U_102[!1 = @sid_7500],S_V_126[!1 = @sid_7501]))
goal reachable: begin(startInitiator(U[],V[],S_U[!1 = @sid_7504])) -> end(endResponder(U[],V[],S_U[!1 = @sid_7504],S_V[!1 = @sid_7505]))
RESULT event(endResponder(U_149,V_150,S_U_151,S_V_152)) ==> event(startInitiator(U_149,V_150,S_U_151)) is true.
-- Query event(endInitiator(U_7512,V_7513,S_U_7514,S_V_7515)) ==> event(startResponder(U_7512,V_7513,S_V_7515))
Completing...
200 rules inserted. The rule base contains 146 rules. 36 rules in the queue.
400 rules inserted. The rule base contains 230 rules. 8 rules in the queue.
Starting query event(endInitiator(U_7512,V_7513,S_U_7514,S_V_7515)) ==> event(startResponder(U_7512,V_7513,S_V_7515))
goal reachable: begin(startResponder(U[],W[],S_V_126[!1 = @sid_14476])) -> end(endInitiator(U[],W[],S_U_102[!1 = @sid_14477],S_V_126[!1 = @sid_14476]))
goal reachable: begin(startResponder(U[],V[],S_V[!1 = @sid_14480])) -> end(endInitiator(U[],V[],S_U[!1 = @sid_14481],S_V[!1 = @sid_14480]))
RESULT event(endInitiator(U_7512,V_7513,S_U_7514,S_V_7515)) ==> event(startResponder(U_7512,V_7513,S_V_7515)) is true.
